Service 定义
将运行在一组 Pods 上的应用程序公开为网络服务的抽象方法。
使用 Kubernetes 服务无需修改应用程序即可使用通用的服务发现机制。 Kubernetes 为 Pods 提供自己的 IP 地址，并为一组 Pod 提供相同的 DNS 名， 并且可以在它们之间进行负载均衡。

为什么需要 Service
每个 Pod 都有自己的 IP 地址，但是在 Deployment 中，在同一时刻运行的 Pod 集合可能与稍后运行该应用程序的 Pod 集合不同。
这导致了一个问题： 如果一组 Pod（称为“后端”）为群集内的其他 Pod（称为“前端”）提供功能， 那么前端如何找出并跟踪要连接的 IP 地址，以便前端可以使用后端部分？

集群内部pod如何通信？
1.通过环境变量
     kubelet 会为每个活跃的 Service 添加一组环境变量，包括地址、端口、协议
     SVCNAME为Service名称大写，例如：
     MY_NGINX_PORT_80_TCP_PORT=80
     MY_NGINX_PORT_80_TCP_PROTO=tcp
     MY_NGINX_PORT_80_TCP_ADDR=10.1.180.155
2.通过DNS记录


Ingress
    Ingress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。
    Ingress 公开了从集群外部到集群内服务的 HTTP 和 HTTPS 路由。 流量路由由 Ingress 资源上定义的规则控制。
    访问流程见图片 ingress.jpg
