GC Root
    1.栈上的指针引用；
    2.全局变量指针引用；
    3.寄存器指针引用；

怎么判断对象是否存活？
    可达性分析，从GC Root出发进行深度优先搜索（DFS），把不可达的标记可回收

golang gc算法
    由于golang的堆内存独特设计，直接使用最简单的标记-清除
    三色标记法：
        黑色：有用，已经分析扫描
        灰色：有用，暂无分析扫描
        白色：暂时无用
        1.起始阶段，所有对象都是白色，从根对象出发扫描可达对象，标记为灰色；
        2.扫描灰色对象，将其引用的对象标记为灰色，自身标记为黑色；
        3.重复流程2，直到没有灰色对象，最后只有黑色、白色，清理白色对象；
        4.再次gc标记时，所有对象标记为白色对象；

gc触发的时机
    系统定时触发：sysmon函数定时检查，如果2分钟之内没有触发gc则触发；
    用户手动触发：调用runtime.GC()函数；
    申请内存时触发：mallocgc执行时触发gc；


gc优化原则：减少堆上分配垃圾
    1.内存池化；
    2.减少逃逸；
    3.巧用空结构体；

分析gc
    设置环境变量 GODEBUG="gctrace=1" , export GODEBUG="gctrace=1"
