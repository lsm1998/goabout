和C/C++不同，golang的栈内存位于堆内存之内，

逃逸分析：
1.指针逃逸：函数返回对象指针；
2.空接口逃逸：如果函数参数为interface{}，则函数实参很可能逃逸，取决于是否对其使用反射；
3.大变量逃逸：64位操作系统，超过64KB会逃逸；

栈扩容：
golang协程栈起始为2KB，runtime.morestack() 检查协程栈是否有足够的空间，不足则需要扩容；
每次扩容为原来的2倍，使用率不足1/4则缩容为原来的1/2；
